name: Dry-run workflow

on:
  pull_request:
    types: [opened, synchronize]
    branches:
      - main

permissions:
  id-token: write
  contents: write
  issues: write
  pull-requests: write

jobs:
  process_pr:
    runs-on: ubuntu-latest
    
    steps:
    - name: Check Commit Type
      uses: gsactions/commit-message-checker@v1
      with:
        pattern: '^\s*(feat|fix|docs|style|refactor|perf|test|chore)(\(.+?\))?: .{1,50}'
        error: 'Your commit message must have a type (feat|fix|docs|style|refactor|perf|test|chore) and be 50 chars or less.'
        excludeDescription: 'true'
        excludeTitle: 'true'
        checkAllCommitMessages: 'true'
        accessToken: ${{ secrets.GITHUB_TOKEN }}

    - name: Checkout code
      uses: actions/checkout@v2
      
    - name: Git Secrets scan
      run: |
        git clone https://github.com/awslabs/git-secrets.git && cd git-secrets
        sudo make install
        git secrets --register-aws --global
        cd ..
        git secrets --scan -r

    - name: Set up Python 3.11
      uses: actions/setup-python@v2
      with:
        python-version: 3.11

    - name: Semgrep scan
      run: |
        pip install semgrep
        semgrep --config p/ci --error

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Set up Node.js 16
      uses: actions/setup-node@v3
      with:
        node-version: '16'

    - name: Build dcv-access-console
      uses: nick-fields/retry@v2
      with:
        timeout_minutes: 10
        max_attempts: 3
        command: ./build.sh
      
    - name: Extract coverages
      run: |
        # Function to calculate coverage percentage
        calculate_coverage() {
          local covered=$1
          local missed=$2
          local total=$((covered + missed))
          if [ $total -eq 0 ]; then
           echo "0"
          else
           echo "scale=2; 100 * $covered / $total" | bc
          fi
        }
        
        # Extract JaCoCo coverages for handler
        JACOCO_CSV_HANDLER="dcv-access-console-handler/build/reports/jacoco/test/jacocoTestReport.csv"
        LINE_COVERED=$(awk -F, 'NR>1 {sum+=$9} END {print sum}' $JACOCO_CSV_HANDLER)
        LINE_MISSED=$(awk -F, 'NR>1 {sum+=$8} END {print sum}' $JACOCO_CSV_HANDLER)
        BRANCH_COVERED=$(awk -F, 'NR>1 {sum+=$7} END {print sum}' $JACOCO_CSV_HANDLER)
        BRANCH_MISSED=$(awk -F, 'NR>1 {sum+=$6} END {print sum}' $JACOCO_CSV_HANDLER)
        
        LINE_COVERAGE=$(calculate_coverage $LINE_COVERED $LINE_MISSED)
        BRANCH_COVERAGE=$(calculate_coverage $BRANCH_COVERED $BRANCH_MISSED)
        echo "JACOCO_LINE_COVERAGE_HANDLER=$LINE_COVERAGE" >> $GITHUB_ENV
        echo "JACOCO_BRANCH_COVERAGE_HANDLER=$BRANCH_COVERAGE" >> $GITHUB_ENV
        
        # Extract JaCoCo coverages for auth server
        JACOCO_CSV_AUTH_SERVER="dcv-access-console-auth-server/build/reports/jacoco/test/jacocoTestReport.csv"
        LINE_COVERED=$(awk -F, 'NR>1 {sum+=$9} END {print sum}' $JACOCO_CSV_AUTH_SERVER)
        LINE_MISSED=$(awk -F, 'NR>1 {sum+=$8} END {print sum}' $JACOCO_CSV_AUTH_SERVER)
        BRANCH_COVERED=$(awk -F, 'NR>1 {sum+=$7} END {print sum}' $JACOCO_CSV_AUTH_SERVER)
        BRANCH_MISSED=$(awk -F, 'NR>1 {sum+=$6} END {print sum}' $JACOCO_CSV_AUTH_SERVER)
        
        LINE_COVERAGE=$(calculate_coverage $LINE_COVERED $LINE_MISSED)
        BRANCH_COVERAGE=$(calculate_coverage $BRANCH_COVERED $BRANCH_MISSED)
        echo "JACOCO_LINE_COVERAGE_AUTH_SERVER=$LINE_COVERAGE" >> $GITHUB_ENV
        echo "JACOCO_BRANCH_COVERAGE_AUTH_SERVER=$BRANCH_COVERAGE" >> $GITHUB_ENV
        
        # Extract Jest coverages
        COVERAGE_SUMMARY=$(cat dcv-access-console-web-client/server/coverage/coverage-summary.json)
        LINE_COVERAGE=$(echo $COVERAGE_SUMMARY | jq -r '.total.lines.pct')
        BRANCH_COVERAGE=$(echo $COVERAGE_SUMMARY | jq -r '.total.branches.pct')
        echo "JEST_LINE_COVERAGE=$LINE_COVERAGE" >> $GITHUB_ENV
        echo "JEST_BRANCH_COVERAGE=$BRANCH_COVERAGE" >> $GITHUB_ENV
        
        # Extract Tox coverages
        LINE_COVERAGE=$(grep -oP 'line-rate="\K[^"]*' dcv-access-console-configuration-wizard/build/coverage/coverage.xml | head -1 | awk '{printf "%.2f", $1 * 100}')
        BRANCH_COVERAGE=$(grep -oP 'branch-rate="\K[^"]*' dcv-access-console-configuration-wizard/build/coverage/coverage.xml | head -1 | awk '{printf "%.2f", $1 * 100}')
        echo "TOX_LINE_COVERAGE=$LINE_COVERAGE" >> $GITHUB_ENV
        echo "TOX_BRANCH_COVERAGE=$BRANCH_COVERAGE" >> $GITHUB_ENV

    - name: Comment PR
      uses: actions/github-script@v6
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          // Function to create a table row
          function createRow(component, line, branch) {
            return `<tr>
              <td width="50%">${component}</td>
              <td width="25%" align="center">${line}%</td>
              <td width="25%" align="center">${branch}%</td>
            </tr>`;
          }

          // Create report
          const report = `
          ## Coverage Report
          <table>
            <tr>
              <th width="50%">Component</th>
              <th width="25%">Lines</th>
              <th width="25%">Branches</th>
            </tr>
            ${createRow('dcv-access-console-handler', process.env.JACOCO_LINE_COVERAGE_HANDLER, process.env.JACOCO_BRANCH_COVERAGE_HANDLER)}
            ${createRow('dcv-access-console-web-client', process.env.JEST_LINE_COVERAGE, process.env.JEST_BRANCH_COVERAGE)}
            ${createRow('dcv-access-console-auth-server', process.env.JACOCO_LINE_COVERAGE_AUTH_SERVER, process.env.JACOCO_BRANCH_COVERAGE_AUTH_SERVER)}
            ${createRow('dcv-access-console-configuration-wizard', process.env.TOX_LINE_COVERAGE, process.env.TOX_BRANCH_COVERAGE)}
          </table>
          `;

          // Post comment
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: report
          });
